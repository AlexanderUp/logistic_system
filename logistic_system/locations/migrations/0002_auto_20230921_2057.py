# Generated by Django 4.2.5 on 2023-09-21 20:57
import csv

from django.conf import settings
from django.db import migrations

DATA_FILE_PATH = settings.BASE_DIR / 'data' / 'uszips.csv'


def create_locations_from_csv(apps, schema_editor):
    db_alias = schema_editor.connection.alias

    State = apps.get_model('locations', 'State')
    City = apps.get_model('locations', 'City')
    Location = apps.get_model('locations', 'Location')

    state_dict = {}
    city_dict = {}
    locations = []

    with open(DATA_FILE_PATH) as state_source:
        states = {}
        for state_row in csv.DictReader(state_source):
            state = State(
                state_id=state_row['state_id'],
                name=state_row['state_name'],
            )
            states.update({state.name: state})

        state_list = State.objects.using(db_alias).bulk_create(states.values())
        state_dict.update({state.state_id: state for state in state_list})

    with open(DATA_FILE_PATH) as city_source:
        cities = {}
        for city_row in csv.DictReader(city_source):
            city = City(
                name=city_row['city'],
                state=state_dict[city_row['state_id']],
            )
            cities.update({city.name: city})

        city_list = City.objects.using(db_alias).bulk_create(cities.values())
        city_dict.update({city.name: city for city in city_list})

    with open(DATA_FILE_PATH) as source:
        for row in csv.DictReader(source):
            locations.append(
                Location(
                    state=state_dict[row['state_id']],
                    city=city_dict[row['city']],
                    zip_code=row['zip'],
                    latitude=row['lat'],
                    longitude=row['lng'],
                )
            )

    Location.objects.using(db_alias).bulk_create(locations)


def reverse_create_locations_from_csv(apps, schema_editor):
    db_alias = schema_editor.connection.alias

    State = apps.get_model('locations', 'State')
    City = apps.get_model('locations', 'City')
    Location = apps.get_model('locations', 'Location')

    Location.objects.using(db_alias).all().delete()
    City.objects.using(db_alias).all().delete()
    State.objects.using(db_alias).all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ('locations', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            create_locations_from_csv,
            reverse_create_locations_from_csv,
        ),
    ]
